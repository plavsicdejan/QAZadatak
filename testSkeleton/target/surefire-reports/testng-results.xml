<?xml version="1.0" encoding="UTF-8"?>
<testng-results total="42" passed="41" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2020-12-12T20:04:57Z" name="testng" finished-at="2020-12-12T20:04:59Z" duration-ms="2333">
    <groups>
    </groups>
    <test started-at="2020-12-12T20:04:57Z" name="simpleTest" finished-at="2020-12-12T20:04:59Z" duration-ms="2333">
      <class name="rs.hooloovoo.test.CreateUserTest">
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.CreateUserTest@3754a4bf]" started-at="2020-12-12T21:04:57Z" name="init" finished-at="2020-12-12T21:04:57Z" duration-ms="64" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="aRegularCall()[pri:0, instance:rs.hooloovoo.test.CreateUserTest@3754a4bf]" started-at="2020-12-12T21:04:57Z" name="aRegularCall" finished-at="2020-12-12T21:04:58Z" duration-ms="1044" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aRegularCall -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.CreateUserTest@3754a4bf]" started-at="2020-12-12T21:04:58Z" name="init" finished-at="2020-12-12T21:04:58Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="aRegularCallSpecific(java.lang.String, java.lang.Integer)[pri:0, instance:rs.hooloovoo.test.CreateUserTest@3754a4bf]" started-at="2020-12-12T21:04:58Z" name="aRegularCallSpecific" data-provider="userNameSpecific" finished-at="2020-12-12T21:04:58Z" duration-ms="32" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[8686iF]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[201]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aRegularCallSpecific -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.CreateUserTest@3754a4bf]" started-at="2020-12-12T21:04:58Z" name="init" finished-at="2020-12-12T21:04:58Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="aRegularCallSpecific(java.lang.String, java.lang.Integer)[pri:0, instance:rs.hooloovoo.test.CreateUserTest@3754a4bf]" started-at="2020-12-12T21:04:58Z" name="aRegularCallSpecific" data-provider="userNameSpecific" finished-at="2020-12-12T21:04:58Z" duration-ms="15" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[!@#$%^&]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[201]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aRegularCallSpecific -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.CreateUserTest@3754a4bf]" started-at="2020-12-12T21:04:58Z" name="init" finished-at="2020-12-12T21:04:58Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="aRegularCallSpecific(java.lang.String, java.lang.Integer)[pri:0, instance:rs.hooloovoo.test.CreateUserTest@3754a4bf]" started-at="2020-12-12T21:04:58Z" name="aRegularCallSpecific" data-provider="userNameSpecific" finished-at="2020-12-12T21:04:58Z" duration-ms="45" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[123456]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[201]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aRegularCallSpecific -->
        <test-method signature="aRegularCallSpecific(java.lang.String, java.lang.Integer)[pri:0, instance:rs.hooloovoo.test.CreateUserTest@3754a4bf]" started-at="2020-12-12T21:04:58Z" name="aRegularCallSpecific" data-provider="userNameSpecific" finished-at="2020-12-12T21:04:58Z" duration-ms="11" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[VELIKA_SLOVA]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[201]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Bad response code:  expected:<201> but was:<400>]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Bad response code:  expected:<201> but was:<400>
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.failNotEquals(Assert.java:834)
	at org.junit.Assert.assertEquals(Assert.java:645)
	at rs.hooloovoo.test.CreateUserTest.aRegularCallSpecific(CreateUserTest.java:92)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aRegularCallSpecific -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.CreateUserTest@3754a4bf]" started-at="2020-12-12T21:04:58Z" name="init" finished-at="2020-12-12T21:04:58Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="aRegularCallSpecific(java.lang.String, java.lang.Integer)[pri:0, instance:rs.hooloovoo.test.CreateUserTest@3754a4bf]" started-at="2020-12-12T21:04:58Z" name="aRegularCallSpecific" data-provider="userNameSpecific" finished-at="2020-12-12T21:04:58Z" duration-ms="15" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[mala_slova]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[201]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aRegularCallSpecific -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.CreateUserTest@3754a4bf]" started-at="2020-12-12T21:04:58Z" name="init" finished-at="2020-12-12T21:04:58Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="aRegularCallSpecific(java.lang.String, java.lang.Integer)[pri:0, instance:rs.hooloovoo.test.CreateUserTest@3754a4bf]" started-at="2020-12-12T21:04:58Z" name="aRegularCallSpecific" data-provider="userNameSpecific" finished-at="2020-12-12T21:04:58Z" duration-ms="35" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[mix_SLoVA]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[201]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aRegularCallSpecific -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.CreateUserTest@3754a4bf]" started-at="2020-12-12T21:04:58Z" name="init" finished-at="2020-12-12T21:04:58Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.CreateUserTest@3754a4bf]" started-at="2020-12-12T21:04:58Z" name="init" finished-at="2020-12-12T21:04:58Z" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="aRegularCallSpecific(java.lang.String, java.lang.Integer)[pri:0, instance:rs.hooloovoo.test.CreateUserTest@3754a4bf]" started-at="2020-12-12T21:04:58Z" name="aRegularCallSpecific" data-provider="userNameSpecific" finished-at="2020-12-12T21:04:58Z" duration-ms="12" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[mix_#@!#%$_555-333]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[201]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aRegularCallSpecific -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.CreateUserTest@3754a4bf]" started-at="2020-12-12T21:04:58Z" name="init" finished-at="2020-12-12T21:04:58Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="aRegularCallSpecific(java.lang.String, java.lang.Integer)[pri:0, instance:rs.hooloovoo.test.CreateUserTest@3754a4bf]" started-at="2020-12-12T21:04:58Z" name="aRegularCallSpecific" data-provider="userNameSpecific" finished-at="2020-12-12T21:04:58Z" duration-ms="11" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[*?*?*?*?]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[201]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aRegularCallSpecific -->
        <test-method signature="alreadyUsedUsername()[pri:0, instance:rs.hooloovoo.test.CreateUserTest@3754a4bf]" started-at="2020-12-12T21:04:58Z" name="alreadyUsedUsername" finished-at="2020-12-12T21:04:58Z" duration-ms="20" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- alreadyUsedUsername -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.CreateUserTest@3754a4bf]" started-at="2020-12-12T21:04:58Z" name="init" finished-at="2020-12-12T21:04:58Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="usernameCheck(java.lang.String, java.lang.Integer, java.lang.String)[pri:0, instance:rs.hooloovoo.test.CreateUserTest@3754a4bf]" started-at="2020-12-12T21:04:58Z" name="usernameCheck" data-provider="badUserN" finished-at="2020-12-12T21:04:58Z" duration-ms="10" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[b326]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[400]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Username must not be longer that 50 characters or shorter than 6 characters.]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- usernameCheck -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.CreateUserTest@3754a4bf]" started-at="2020-12-12T21:04:58Z" name="init" finished-at="2020-12-12T21:04:58Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.CreateUserTest@3754a4bf]" started-at="2020-12-12T21:04:58Z" name="init" finished-at="2020-12-12T21:04:58Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="usernameCheck(java.lang.String, java.lang.Integer, java.lang.String)[pri:0, instance:rs.hooloovoo.test.CreateUserTest@3754a4bf]" started-at="2020-12-12T21:04:58Z" name="usernameCheck" data-provider="badUserN" finished-at="2020-12-12T21:04:58Z" duration-ms="14" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[FyWazwfCrWSr4L1Xa45eC7Rf27ToUMyMfQRMpdDHxFZNT4TPpT4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[400]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Username must not be longer that 50 characters or shorter than 6 characters.]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- usernameCheck -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.CreateUserTest@3754a4bf]" started-at="2020-12-12T21:04:58Z" name="init" finished-at="2020-12-12T21:04:58Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="usernameCheck(java.lang.String, java.lang.Integer, java.lang.String)[pri:0, instance:rs.hooloovoo.test.CreateUserTest@3754a4bf]" started-at="2020-12-12T21:04:58Z" name="usernameCheck" data-provider="badUserN" finished-at="2020-12-12T21:04:58Z" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[400]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Username must not be longer that 50 characters or shorter than 6 characters.]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- usernameCheck -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.CreateUserTest@3754a4bf]" started-at="2020-12-12T21:04:58Z" name="init" finished-at="2020-12-12T21:04:58Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="usernameCheck(java.lang.String, java.lang.Integer, java.lang.String)[pri:0, instance:rs.hooloovoo.test.CreateUserTest@3754a4bf]" started-at="2020-12-12T21:04:58Z" name="usernameCheck" data-provider="badUserN" finished-at="2020-12-12T21:04:58Z" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[!@#$]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[400]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Username must not be longer that 50 characters or shorter than 6 characters.]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- usernameCheck -->
        <test-method is-config="true" signature="after()[pri:0, instance:rs.hooloovoo.test.CreateUserTest@3754a4bf]" started-at="2020-12-12T21:04:58Z" name="after" finished-at="2020-12-12T21:04:59Z" duration-ms="584" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
      </class> <!-- rs.hooloovoo.test.CreateUserTest -->
      <class name="rs.hooloovoo.test.GetUserTest">
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.GetUserTest@62379589]" started-at="2020-12-12T21:04:57Z" name="init" finished-at="2020-12-12T21:04:58Z" duration-ms="1097" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="aRegularCall()[pri:0, instance:rs.hooloovoo.test.GetUserTest@62379589]" started-at="2020-12-12T21:04:58Z" name="aRegularCall" finished-at="2020-12-12T21:04:58Z" duration-ms="119" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aRegularCall -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.GetUserTest@62379589]" started-at="2020-12-12T21:04:58Z" name="init" finished-at="2020-12-12T21:04:58Z" duration-ms="26" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="allMethods(java.lang.String)[pri:0, instance:rs.hooloovoo.test.GetUserTest@62379589]" started-at="2020-12-12T21:04:58Z" name="allMethods" data-provider="methods" finished-at="2020-12-12T21:04:58Z" duration-ms="233" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[POST]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- allMethods -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.GetUserTest@62379589]" started-at="2020-12-12T21:04:58Z" name="init" finished-at="2020-12-12T21:04:58Z" duration-ms="20" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="allMethods(java.lang.String)[pri:0, instance:rs.hooloovoo.test.GetUserTest@62379589]" started-at="2020-12-12T21:04:58Z" name="allMethods" data-provider="methods" finished-at="2020-12-12T21:04:58Z" duration-ms="12" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[PUT]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- allMethods -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.GetUserTest@62379589]" started-at="2020-12-12T21:04:58Z" name="init" finished-at="2020-12-12T21:04:58Z" duration-ms="18" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="allMethods(java.lang.String)[pri:0, instance:rs.hooloovoo.test.GetUserTest@62379589]" started-at="2020-12-12T21:04:58Z" name="allMethods" data-provider="methods" finished-at="2020-12-12T21:04:58Z" duration-ms="24" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[DELETE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- allMethods -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.GetUserTest@62379589]" started-at="2020-12-12T21:04:58Z" name="init" finished-at="2020-12-12T21:04:58Z" duration-ms="15" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="nonExitsingUser()[pri:0, instance:rs.hooloovoo.test.GetUserTest@62379589]" started-at="2020-12-12T21:04:58Z" name="nonExitsingUser" finished-at="2020-12-12T21:04:58Z" duration-ms="17" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- nonExitsingUser -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.GetUserTest@62379589]" started-at="2020-12-12T21:04:58Z" name="init" finished-at="2020-12-12T21:04:59Z" duration-ms="49" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="usernameSpec(java.lang.String)[pri:0, instance:rs.hooloovoo.test.GetUserTest@62379589]" started-at="2020-12-12T21:04:59Z" name="usernameSpec" data-provider="userNameSpecific" finished-at="2020-12-12T21:04:59Z" duration-ms="20" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[!@#$$$**--]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- usernameSpec -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.GetUserTest@62379589]" started-at="2020-12-12T21:04:59Z" name="init" finished-at="2020-12-12T21:04:59Z" duration-ms="15" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="usernameToLowcase()[pri:0, instance:rs.hooloovoo.test.GetUserTest@62379589]" started-at="2020-12-12T21:04:59Z" name="usernameToLowcase" finished-at="2020-12-12T21:04:59Z" duration-ms="11" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- usernameToLowcase -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.GetUserTest@62379589]" started-at="2020-12-12T21:04:59Z" name="init" finished-at="2020-12-12T21:04:59Z" duration-ms="23" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="usernameToUPcase()[pri:0, instance:rs.hooloovoo.test.GetUserTest@62379589]" started-at="2020-12-12T21:04:59Z" name="usernameToUPcase" finished-at="2020-12-12T21:04:59Z" duration-ms="33" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- usernameToUPcase -->
        <test-method is-config="true" signature="after()[pri:0, instance:rs.hooloovoo.test.GetUserTest@62379589]" started-at="2020-12-12T21:04:59Z" name="after" finished-at="2020-12-12T21:04:59Z" duration-ms="210" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
      </class> <!-- rs.hooloovoo.test.GetUserTest -->
      <class name="rs.hooloovoo.test.GetAuditTest">
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.GetAuditTest@36fc695d]" started-at="2020-12-12T21:04:57Z" name="init" finished-at="2020-12-12T21:04:58Z" duration-ms="1098" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="aRegularCall()[pri:0, instance:rs.hooloovoo.test.GetAuditTest@36fc695d]" started-at="2020-12-12T21:04:58Z" name="aRegularCall" finished-at="2020-12-12T21:04:58Z" duration-ms="381" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aRegularCall -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.GetAuditTest@36fc695d]" started-at="2020-12-12T21:04:58Z" name="init" finished-at="2020-12-12T21:04:58Z" duration-ms="28" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="aRegularCallAllActions(java.lang.String)[pri:0, instance:rs.hooloovoo.test.GetAuditTest@36fc695d]" started-at="2020-12-12T21:04:58Z" name="aRegularCallAllActions" data-provider="allActions" finished-at="2020-12-12T21:04:58Z" duration-ms="38" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[SAVE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aRegularCallAllActions -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.GetAuditTest@36fc695d]" started-at="2020-12-12T21:04:58Z" name="init" finished-at="2020-12-12T21:04:58Z" duration-ms="32" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="aRegularCallAllActions(java.lang.String)[pri:0, instance:rs.hooloovoo.test.GetAuditTest@36fc695d]" started-at="2020-12-12T21:04:58Z" name="aRegularCallAllActions" data-provider="allActions" finished-at="2020-12-12T21:04:59Z" duration-ms="41" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[LOGIN]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aRegularCallAllActions -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.GetAuditTest@36fc695d]" started-at="2020-12-12T21:04:59Z" name="init" finished-at="2020-12-12T21:04:59Z" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="aRegularCallAllActions(java.lang.String)[pri:0, instance:rs.hooloovoo.test.GetAuditTest@36fc695d]" started-at="2020-12-12T21:04:59Z" name="aRegularCallAllActions" data-provider="allActions" finished-at="2020-12-12T21:04:59Z" duration-ms="49" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[DELETE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aRegularCallAllActions -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.GetAuditTest@36fc695d]" started-at="2020-12-12T21:04:59Z" name="init" finished-at="2020-12-12T21:04:59Z" duration-ms="31" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="aRegularCallAllActions(java.lang.String)[pri:0, instance:rs.hooloovoo.test.GetAuditTest@36fc695d]" started-at="2020-12-12T21:04:59Z" name="aRegularCallAllActions" data-provider="allActions" finished-at="2020-12-12T21:04:59Z" duration-ms="30" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[UPDATE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aRegularCallAllActions -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.GetAuditTest@36fc695d]" started-at="2020-12-12T21:04:59Z" name="init" finished-at="2020-12-12T21:04:59Z" duration-ms="24" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="allMethods(java.lang.String)[pri:0, instance:rs.hooloovoo.test.GetAuditTest@36fc695d]" started-at="2020-12-12T21:04:59Z" name="allMethods" data-provider="methods" finished-at="2020-12-12T21:04:59Z" duration-ms="13" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[PUT]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- allMethods -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.GetAuditTest@36fc695d]" started-at="2020-12-12T21:04:59Z" name="init" finished-at="2020-12-12T21:04:59Z" duration-ms="23" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="allMethods(java.lang.String)[pri:0, instance:rs.hooloovoo.test.GetAuditTest@36fc695d]" started-at="2020-12-12T21:04:59Z" name="allMethods" data-provider="methods" finished-at="2020-12-12T21:04:59Z" duration-ms="17" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[POST]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- allMethods -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.GetAuditTest@36fc695d]" started-at="2020-12-12T21:04:59Z" name="init" finished-at="2020-12-12T21:04:59Z" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="allMethods(java.lang.String)[pri:0, instance:rs.hooloovoo.test.GetAuditTest@36fc695d]" started-at="2020-12-12T21:04:59Z" name="allMethods" data-provider="methods" finished-at="2020-12-12T21:04:59Z" duration-ms="21" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[DELETE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- allMethods -->
        <test-method is-config="true" signature="after()[pri:0, instance:rs.hooloovoo.test.GetAuditTest@36fc695d]" started-at="2020-12-12T21:04:59Z" name="after" finished-at="2020-12-12T21:04:59Z" duration-ms="101" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
      </class> <!-- rs.hooloovoo.test.GetAuditTest -->
      <class name="rs.hooloovoo.test.LoginTest">
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.LoginTest@59474f18]" started-at="2020-12-12T21:04:59Z" name="init" finished-at="2020-12-12T21:04:59Z" duration-ms="18" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="aRegularCall()[pri:0, instance:rs.hooloovoo.test.LoginTest@59474f18]" started-at="2020-12-12T21:04:59Z" name="aRegularCall" finished-at="2020-12-12T21:04:59Z" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aRegularCall -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.LoginTest@59474f18]" started-at="2020-12-12T21:04:59Z" name="init" finished-at="2020-12-12T21:04:59Z" duration-ms="31" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="allMethods(java.lang.String)[pri:0, instance:rs.hooloovoo.test.LoginTest@59474f18]" started-at="2020-12-12T21:04:59Z" name="allMethods" data-provider="methods" finished-at="2020-12-12T21:04:59Z" duration-ms="10" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[PUT]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- allMethods -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.LoginTest@59474f18]" started-at="2020-12-12T21:04:59Z" name="init" finished-at="2020-12-12T21:04:59Z" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="allMethods(java.lang.String)[pri:0, instance:rs.hooloovoo.test.LoginTest@59474f18]" started-at="2020-12-12T21:04:59Z" name="allMethods" data-provider="methods" finished-at="2020-12-12T21:04:59Z" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[DELETE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- allMethods -->
        <test-method is-config="true" signature="after()[pri:0, instance:rs.hooloovoo.test.LoginTest@59474f18]" started-at="2020-12-12T21:04:59Z" name="after" finished-at="2020-12-12T21:04:59Z" duration-ms="57" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
      </class> <!-- rs.hooloovoo.test.LoginTest -->
      <class name="rs.hooloovoo.test.CreateAuditTest">
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.CreateAuditTest@4afcd809]" started-at="2020-12-12T21:04:57Z" name="init" finished-at="2020-12-12T21:04:58Z" duration-ms="1097" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="aRegularCallAllActions(java.lang.String)[pri:0, instance:rs.hooloovoo.test.CreateAuditTest@4afcd809]" started-at="2020-12-12T21:04:58Z" name="aRegularCallAllActions" data-provider="allActions" finished-at="2020-12-12T21:04:58Z" duration-ms="382" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[SAVE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aRegularCallAllActions -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.CreateAuditTest@4afcd809]" started-at="2020-12-12T21:04:58Z" name="init" finished-at="2020-12-12T21:04:59Z" duration-ms="323" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="aRegularCallAllActions(java.lang.String)[pri:0, instance:rs.hooloovoo.test.CreateAuditTest@4afcd809]" started-at="2020-12-12T21:04:59Z" name="aRegularCallAllActions" data-provider="allActions" finished-at="2020-12-12T21:04:59Z" duration-ms="53" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[LOGIN]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aRegularCallAllActions -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.CreateAuditTest@4afcd809]" started-at="2020-12-12T21:04:59Z" name="init" finished-at="2020-12-12T21:04:59Z" duration-ms="15" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="aRegularCallAllActions(java.lang.String)[pri:0, instance:rs.hooloovoo.test.CreateAuditTest@4afcd809]" started-at="2020-12-12T21:04:59Z" name="aRegularCallAllActions" data-provider="allActions" finished-at="2020-12-12T21:04:59Z" duration-ms="25" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[DELETE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aRegularCallAllActions -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.CreateAuditTest@4afcd809]" started-at="2020-12-12T21:04:59Z" name="init" finished-at="2020-12-12T21:04:59Z" duration-ms="14" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="aRegularCallAllActions(java.lang.String)[pri:0, instance:rs.hooloovoo.test.CreateAuditTest@4afcd809]" started-at="2020-12-12T21:04:59Z" name="aRegularCallAllActions" data-provider="allActions" finished-at="2020-12-12T21:04:59Z" duration-ms="38" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[UPDATE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aRegularCallAllActions -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.CreateAuditTest@4afcd809]" started-at="2020-12-12T21:04:59Z" name="init" finished-at="2020-12-12T21:04:59Z" duration-ms="17" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="allActionsOneUser()[pri:0, instance:rs.hooloovoo.test.CreateAuditTest@4afcd809]" started-at="2020-12-12T21:04:59Z" name="allActionsOneUser" finished-at="2020-12-12T21:04:59Z" duration-ms="119" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- allActionsOneUser -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.CreateAuditTest@4afcd809]" started-at="2020-12-12T21:04:59Z" name="init" finished-at="2020-12-12T21:04:59Z" duration-ms="11" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="allMethods(java.lang.String)[pri:0, instance:rs.hooloovoo.test.CreateAuditTest@4afcd809]" started-at="2020-12-12T21:04:59Z" name="allMethods" data-provider="methods" finished-at="2020-12-12T21:04:59Z" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[GET]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- allMethods -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.CreateAuditTest@4afcd809]" started-at="2020-12-12T21:04:59Z" name="init" finished-at="2020-12-12T21:04:59Z" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="allMethods(java.lang.String)[pri:0, instance:rs.hooloovoo.test.CreateAuditTest@4afcd809]" started-at="2020-12-12T21:04:59Z" name="allMethods" data-provider="methods" finished-at="2020-12-12T21:04:59Z" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[POST]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- allMethods -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.CreateAuditTest@4afcd809]" started-at="2020-12-12T21:04:59Z" name="init" finished-at="2020-12-12T21:04:59Z" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="allMethods(java.lang.String)[pri:0, instance:rs.hooloovoo.test.CreateAuditTest@4afcd809]" started-at="2020-12-12T21:04:59Z" name="allMethods" data-provider="methods" finished-at="2020-12-12T21:04:59Z" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[DELETE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- allMethods -->
        <test-method is-config="true" signature="init()[pri:0, instance:rs.hooloovoo.test.CreateAuditTest@4afcd809]" started-at="2020-12-12T21:04:59Z" name="init" finished-at="2020-12-12T21:04:59Z" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="sameActionsOneUser()[pri:0, instance:rs.hooloovoo.test.CreateAuditTest@4afcd809]" started-at="2020-12-12T21:04:59Z" name="sameActionsOneUser" finished-at="2020-12-12T21:04:59Z" duration-ms="119" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sameActionsOneUser -->
        <test-method is-config="true" signature="after()[pri:0, instance:rs.hooloovoo.test.CreateAuditTest@4afcd809]" started-at="2020-12-12T21:04:59Z" name="after" finished-at="2020-12-12T21:04:59Z" duration-ms="17" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
      </class> <!-- rs.hooloovoo.test.CreateAuditTest -->
    </test> <!-- simpleTest -->
  </suite> <!-- testng -->
</testng-results>
